(function(exports, node) {
  var saved_instance;

  /**
   * Connect to the server and initialize the jiff instance
   */
  exports.connect = function (hostname, computation_id, options) {
    var opt = Object.assign({}, options);

    if(node)
      jiff = require('{{{JIFF_PATH}}}/lib/jiff-client');

    saved_instance = jiff.make_jiff(hostname, computation_id, opt);
    return saved_instance;
  };


  const project = function(inputRel, projCols)
  {

    var result = [];

    for (var i = 0; i < inputRel.length; i++)
    {
      result.push([]);
    }

    for (var j = 0; j < inputRel.length; j++)
    {
      for (var k = 0; k < projCols.length; k++)
      {
        result[j].push(inputRel[j][projCols[k]]);
      }
    }
    return result;

  };

  const concatenate = function(inRels)
  {
    var result = [];

    for (var i = 0; i < inRels.length; i++)
    {
      for (var j = 0; j < inRels[i].length; j++)
      {
        result.push(inRels[i][j]);
      }
    }

    return result;
  };

  const join = function(leftRel, rightRel, leftJoinColIdx, rightJoinColIdx)
  {

    var result = []

    for (var i = 0; i < leftRel.length; i++)
    {
      var leftJoinCol = leftRel[i][leftJoinColIdx];
      for (var j = 0; j < rightRel.length; j++)
      {
        var rightJoinCol = rightRel[j][rightJoinColIdx];
        if (leftJoinCol.eq(rightJoinCol))
        {
          var newLeft = leftRel[i].slice();
          var newRight = rightRel[j].slice();
          var jOne = newLeft.splice(leftJoinColIdx, 1);
          var jTwo = newRight.splice(rightJoinColIdx, 1);
          var newRow = [leftJoinCol].concat(newLeft).concat(newRight);
          result.push(newRow);
        }
      }
    }

    return result;
  }

  const multiply = function(inRel, newCol, targetCol, operands, scalar)
  {
    var result = [];

    for (var i = 0; i < inRel.length; i++)
    {
      var targetVal = inRel[i][targetCol].cmult(scalar);
      for (var j = 0; j < operands.length; j++)
      {
        targetVal = targetVal.smult(inRel[i][operands[j]]);
      }
      if (newCol)
      {
        var newRow = inRel[i].concat([targetVal]);
        result.push(newRow);
      }
      else
      {
        inRel[i][targetCol] = targetVal;
        result.push(inRel[i]);
      }
    }

    return result;

  }


  const sortBy = function(inRel)
  {
    var numRows = inRel.length;
    var numCols = inRel[0].length;

  var sortArray = [];
  for (var i = 0; i < numRows; i++)
  {
    sortArray.push([]);
    for (var k = 0; j < numCols; j++)
    {
      sortArray[i].push(inRel[k]);
    }
  }
	oddEvenSort(array, keyCol, numCols, 0, numRows, true);
  }
  const oddEvenSort = function(array, keyCol, numCols, lo, n, ascending)
  {
    if (n > 1)
    {
      var m = n / 2;
      oddEvenSort(array, keyCol, numCols, lo, m, ascending);
      oddEvenSort(array, keyCol, numCols, lo + m, m, ascending);
      oddEvenMerge(array, keyCol, numCols, lo, n, 1, ascending);
    }
  }

  //TODO
  const oddEvenMerge = function(array, keyCol, numCols, lo, n, ascending)
  {
    var m = r * 2;
    if (m < n)
    {
      oddEvenMerge(array, keyCol, numCols, lo, n, m, ascending);
      oddEvenMerge(array, keyCol, numCols, lo + r, n, m, ascending);

      for (var i = lo + r; (i + r) < (lo + n); i += m)
      {
        compareExchange(array, keyCol, numCols, i, i + r, ascending);
      }
    } else {
      compareExchange(array, keyCol, numCols, lo, lo + r, ascending);
    }
  }

  //TODO
  const compareExchange = function(array, keyCol, numCols, i, j, ascending)
  {
    var x = array[i][keyCol];
    var y = array[j][keyCol];

    var c = 1;
    var d = 1;
    if (ascending)
    {
      c = (x.slt(y)).mult(c);
      d = (y.slt(x)).mult(d);
    }
    else
    {
      d = (x.slt(y)).mult(d);
      c = (y.slt(x)).mult(c);
    }

    var temp1 = [];
    var temp2 = [];

    for (var k = 0; k < numCols; k++)
    {
      var a = array[i][k];
      var b = array[j][k];

      temp1.push((c * a) + (d * b));
      temp2.push((d * a) + (c * b));
    }
    array[i] = temp1;
    array[j] = temp2;
  }

  //TODO: make this work similar to OblivC
  const agg = function(inRel)
  {
    var numCols = 2;
    var numRows = inRel.length;
    var array = [];

    for (var i = 0; i < numRows; i++)
    {
      array.push([]);
      array[i].push(inRel[i][0]);
      array[i].push(inRel[i][1]);
    }

    if (!(numRows && (numRows & (numRows - 1)) === 0))
    {
      var paddedVal = nextPowerOf2(numRows);
      var paddedArray = padInput(array, numCols, numRows, paddedVal);
      return agg_helper(inRel, numCols, paddedVal);
    } else
    {
      return agg_helper(inRel, numCols, numRows);
    }
  }

  const oddEvenAgg = function(array, lo, n)
  {
    if (n > 1)
    {
      var m = n / 2;
      oddEvenAgg(array, lo, m);
      oddEvenAgg(array, lo + m, m);
      for (var i = 0; i < m; i++)
      {
        aggIfEq(array, lo + i);
      }
    }
    else
    {
      aggIfEq(array, 0);
    }
  }

  const aggIfEq = function(array, index)
  {
    var c = array[index][0].eq(array[index+1][0]);
    array[index][0] = array[index][1].add(c.mult(array[index+1][1]));
  }

  const agg_helper = function(inRel, numCols, numRows)
  {

		oddEvenSort(array, 0, numCols, 0, numRows, true);
		oddEvenAgg(array, 0, numRows);

		oddEvenSort(array, 1, numCols, 0, numRows, false);

		var outRows = 0;

		for (var i = 0; i < numRows; i++)
		{
      var add = 1;
      add = array[i][1].neq(0).mult(add);
      outRows += add;
		}

    var returnArray = []

		for (var i = 0; i < numOutRows; i++)
		{
			returnArray.push([])
			array[i].push(array[i][0]);
			array[i].push(array[i][1]);
		}

    return returnArray;
  }

  const padInput = function(array, numCols, numRows, padVal)
  {
    var paddedArray = [];
    for (var i = 0; i < numRows; i++) {
      paddedArray.push([]);
      for (var j = 0; j < numCols; j++)
      {
        paddedArray[i].push(array[i][j]);
      }
    }

    for (var i = numRows; i < pad; i++)
    {
      paddedArray.push([]);
      for (var j = 0; j < numCols; j++)
      {
        paddedArray[i].push(0);
      }
    }
    return paddedArray;
  }

  const nextPowerOf2 = function(n)
  {
    var p = 1;
    if (n && !(n & (n - 1)))
      return n;
    while (p < n)
      p <<= 1;
    return p;
  }

  const divide = function(inRel, newCol, targetCol, operands, scalar)
  {
    var result = [];

    for (var i = 0; i < inRel.length; i++)
    {
      var targetVal = inRel[i][targetCol].cdiv(scalar);
      for (var j = 0; j < operands.length; j++)
      {
        targetVal = targetVal.sdiv(inRel[i][operands[j]]);
      }
      if (newCol)
      {
        var newRow = inRel[i].concat([targetVal]);
        result.push(newRow);
      }
      else
      {
        inRel[i][targetCol] = targetVal;
        result.push(inRel[i]);
      }
    }

    return result;
  }

  const open = function(inRel)
  {
    var results = saved_instance.open_2D_array(inRel);
    return results;
  };

  /**
   * The MPC computation
   */
  exports.compute = function (input, jiff_instance) {
    if(jiff_instance == null) jiff_instance = saved_instance;

    var fs = require('fs');

    // NOTE: assuming 1 file per party here

    var inputData = [];
    var unparsedData = (fs.readFileSync(input, 'UTF-8')).trim();
    var rows = unparsedData.split('\n');

    // start at one, skip header row
    for (let i = 1; i < rows.length; i++)
    {
      let arr = rows[i].split(',').map(Number);
      inputData.push(arr);
    }

    var promise = jiff_instance.share_2D_array(inputData);

    return promise.then(function(shares) {
        {{{OP_CODE}}}
    });
  };
}((typeof exports == 'undefined' ? this.mpc = {} : exports), typeof exports != 'undefined'));
